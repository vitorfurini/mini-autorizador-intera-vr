version: "3.7"

services:

#  mongo:
#    image: mongo:4.2
#    hostname: mongo
#    container_name: mongo
#    ports:
#      - 27017:27017
#    environment:
#      MONGO_INITDB_DATABASE: miniautorizador
#      MONGO_INITDB_ROOT_USERNAME: user
#      MONGO_INITDB_ROOT_PASSWORD: password
#    volumes:
#      - ./scripts/init.js:/docker-entrypoint-initdb.d/init.js:ro

  mysql:
    image: mysql:5.7
    hostname: mysql
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: miniautorizador
      MYSQL_ROOT_PASSWORD:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_container
    networks:
      - network-backend
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_container
    networks:
      - network-backend
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop_container
    networks:
      - network-backend
    depends_on:
      - kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092


networks:
  network-backend:
    driver: bridge

volumes:
  mysql_data: